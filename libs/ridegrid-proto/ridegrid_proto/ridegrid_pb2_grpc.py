# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ridegrid_pb2 as ridegrid__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ridegrid_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GatewayStub(object):
    """gRPC service definitions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRide = channel.unary_unary(
                '/ridegrid.Gateway/CreateRide',
                request_serializer=ridegrid__pb2.RideRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.Ride.FromString,
                _registered_method=True)
        self.CancelRide = channel.unary_unary(
                '/ridegrid.Gateway/CancelRide',
                request_serializer=ridegrid__pb2.CancelRideRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.Ride.FromString,
                _registered_method=True)
        self.GetRide = channel.unary_unary(
                '/ridegrid.Gateway/GetRide',
                request_serializer=ridegrid__pb2.GetRideRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.Ride.FromString,
                _registered_method=True)
        self.GetRiderRides = channel.unary_unary(
                '/ridegrid.Gateway/GetRiderRides',
                request_serializer=ridegrid__pb2.GetRiderRidesRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.GetRiderRidesResponse.FromString,
                _registered_method=True)
        self.UpdateDriverStatus = channel.unary_unary(
                '/ridegrid.Gateway/UpdateDriverStatus',
                request_serializer=ridegrid__pb2.UpdateDriverStatusRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.Driver.FromString,
                _registered_method=True)
        self.GetDriverStatus = channel.unary_unary(
                '/ridegrid.Gateway/GetDriverStatus',
                request_serializer=ridegrid__pb2.GetDriverStatusRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.Driver.FromString,
                _registered_method=True)


class GatewayServicer(object):
    """gRPC service definitions
    """

    def CreateRide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelRide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRiderRides(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDriverStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDriverStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRide': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRide,
                    request_deserializer=ridegrid__pb2.RideRequest.FromString,
                    response_serializer=ridegrid__pb2.Ride.SerializeToString,
            ),
            'CancelRide': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelRide,
                    request_deserializer=ridegrid__pb2.CancelRideRequest.FromString,
                    response_serializer=ridegrid__pb2.Ride.SerializeToString,
            ),
            'GetRide': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRide,
                    request_deserializer=ridegrid__pb2.GetRideRequest.FromString,
                    response_serializer=ridegrid__pb2.Ride.SerializeToString,
            ),
            'GetRiderRides': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRiderRides,
                    request_deserializer=ridegrid__pb2.GetRiderRidesRequest.FromString,
                    response_serializer=ridegrid__pb2.GetRiderRidesResponse.SerializeToString,
            ),
            'UpdateDriverStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDriverStatus,
                    request_deserializer=ridegrid__pb2.UpdateDriverStatusRequest.FromString,
                    response_serializer=ridegrid__pb2.Driver.SerializeToString,
            ),
            'GetDriverStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDriverStatus,
                    request_deserializer=ridegrid__pb2.GetDriverStatusRequest.FromString,
                    response_serializer=ridegrid__pb2.Driver.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ridegrid.Gateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ridegrid.Gateway', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Gateway(object):
    """gRPC service definitions
    """

    @staticmethod
    def CreateRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.Gateway/CreateRide',
            ridegrid__pb2.RideRequest.SerializeToString,
            ridegrid__pb2.Ride.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.Gateway/CancelRide',
            ridegrid__pb2.CancelRideRequest.SerializeToString,
            ridegrid__pb2.Ride.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.Gateway/GetRide',
            ridegrid__pb2.GetRideRequest.SerializeToString,
            ridegrid__pb2.Ride.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRiderRides(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.Gateway/GetRiderRides',
            ridegrid__pb2.GetRiderRidesRequest.SerializeToString,
            ridegrid__pb2.GetRiderRidesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDriverStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.Gateway/UpdateDriverStatus',
            ridegrid__pb2.UpdateDriverStatusRequest.SerializeToString,
            ridegrid__pb2.Driver.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDriverStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.Gateway/GetDriverStatus',
            ridegrid__pb2.GetDriverStatusRequest.SerializeToString,
            ridegrid__pb2.Driver.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TelemetryIngestStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamDriverTelemetry = channel.stream_unary(
                '/ridegrid.TelemetryIngest/StreamDriverTelemetry',
                request_serializer=ridegrid__pb2.DriverTelemetry.SerializeToString,
                response_deserializer=ridegrid__pb2.StreamTelemetryResponse.FromString,
                _registered_method=True)
        self.GetDriverLocation = channel.unary_unary(
                '/ridegrid.TelemetryIngest/GetDriverLocation',
                request_serializer=ridegrid__pb2.GetDriverLocationRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.Driver.FromString,
                _registered_method=True)


class TelemetryIngestServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamDriverTelemetry(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDriverLocation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TelemetryIngestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamDriverTelemetry': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamDriverTelemetry,
                    request_deserializer=ridegrid__pb2.DriverTelemetry.FromString,
                    response_serializer=ridegrid__pb2.StreamTelemetryResponse.SerializeToString,
            ),
            'GetDriverLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDriverLocation,
                    request_deserializer=ridegrid__pb2.GetDriverLocationRequest.FromString,
                    response_serializer=ridegrid__pb2.Driver.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ridegrid.TelemetryIngest', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ridegrid.TelemetryIngest', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TelemetryIngest(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamDriverTelemetry(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/ridegrid.TelemetryIngest/StreamDriverTelemetry',
            ridegrid__pb2.DriverTelemetry.SerializeToString,
            ridegrid__pb2.StreamTelemetryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDriverLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.TelemetryIngest/GetDriverLocation',
            ridegrid__pb2.GetDriverLocationRequest.SerializeToString,
            ridegrid__pb2.Driver.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MatchingEngineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindMatches = channel.unary_unary(
                '/ridegrid.MatchingEngine/FindMatches',
                request_serializer=ridegrid__pb2.RideRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.FindMatchesResponse.FromString,
                _registered_method=True)
        self.UpdateDriverLocation = channel.unary_unary(
                '/ridegrid.MatchingEngine/UpdateDriverLocation',
                request_serializer=ridegrid__pb2.DriverTelemetry.SerializeToString,
                response_deserializer=ridegrid__pb2.UpdateDriverLocationResponse.FromString,
                _registered_method=True)


class MatchingEngineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindMatches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDriverLocation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MatchingEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindMatches': grpc.unary_unary_rpc_method_handler(
                    servicer.FindMatches,
                    request_deserializer=ridegrid__pb2.RideRequest.FromString,
                    response_serializer=ridegrid__pb2.FindMatchesResponse.SerializeToString,
            ),
            'UpdateDriverLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDriverLocation,
                    request_deserializer=ridegrid__pb2.DriverTelemetry.FromString,
                    response_serializer=ridegrid__pb2.UpdateDriverLocationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ridegrid.MatchingEngine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ridegrid.MatchingEngine', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MatchingEngine(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindMatches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.MatchingEngine/FindMatches',
            ridegrid__pb2.RideRequest.SerializeToString,
            ridegrid__pb2.FindMatchesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDriverLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.MatchingEngine/UpdateDriverLocation',
            ridegrid__pb2.DriverTelemetry.SerializeToString,
            ridegrid__pb2.UpdateDriverLocationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AssignmentOrchestratorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessCandidateMatches = channel.unary_unary(
                '/ridegrid.AssignmentOrchestrator/ProcessCandidateMatches',
                request_serializer=ridegrid__pb2.CandidateMatch.SerializeToString,
                response_deserializer=ridegrid__pb2.ProcessCandidateMatchesResponse.FromString,
                _registered_method=True)
        self.HandleDriverResponse = channel.unary_unary(
                '/ridegrid.AssignmentOrchestrator/HandleDriverResponse',
                request_serializer=ridegrid__pb2.DriverResponse.SerializeToString,
                response_deserializer=ridegrid__pb2.HandleDriverResponseResponse.FromString,
                _registered_method=True)


class AssignmentOrchestratorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ProcessCandidateMatches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HandleDriverResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AssignmentOrchestratorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessCandidateMatches': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessCandidateMatches,
                    request_deserializer=ridegrid__pb2.CandidateMatch.FromString,
                    response_serializer=ridegrid__pb2.ProcessCandidateMatchesResponse.SerializeToString,
            ),
            'HandleDriverResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.HandleDriverResponse,
                    request_deserializer=ridegrid__pb2.DriverResponse.FromString,
                    response_serializer=ridegrid__pb2.HandleDriverResponseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ridegrid.AssignmentOrchestrator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ridegrid.AssignmentOrchestrator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AssignmentOrchestrator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ProcessCandidateMatches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.AssignmentOrchestrator/ProcessCandidateMatches',
            ridegrid__pb2.CandidateMatch.SerializeToString,
            ridegrid__pb2.ProcessCandidateMatchesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HandleDriverResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.AssignmentOrchestrator/HandleDriverResponse',
            ridegrid__pb2.DriverResponse.SerializeToString,
            ridegrid__pb2.HandleDriverResponseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StateQueryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRideState = channel.unary_unary(
                '/ridegrid.StateQuery/GetRideState',
                request_serializer=ridegrid__pb2.GetRideRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.Ride.FromString,
                _registered_method=True)
        self.GetRiderState = channel.unary_unary(
                '/ridegrid.StateQuery/GetRiderState',
                request_serializer=ridegrid__pb2.GetRiderRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.GetRiderStateResponse.FromString,
                _registered_method=True)
        self.GetDriverState = channel.unary_unary(
                '/ridegrid.StateQuery/GetDriverState',
                request_serializer=ridegrid__pb2.GetDriverRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.GetDriverStateResponse.FromString,
                _registered_method=True)
        self.StreamRideUpdates = channel.unary_stream(
                '/ridegrid.StateQuery/StreamRideUpdates',
                request_serializer=ridegrid__pb2.StreamRideUpdatesRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.RideEvent.FromString,
                _registered_method=True)
        self.StreamDriverUpdates = channel.unary_stream(
                '/ridegrid.StateQuery/StreamDriverUpdates',
                request_serializer=ridegrid__pb2.StreamDriverUpdatesRequest.SerializeToString,
                response_deserializer=ridegrid__pb2.DriverTelemetry.FromString,
                _registered_method=True)


class StateQueryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRideState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRiderState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDriverState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamRideUpdates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamDriverUpdates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StateQueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRideState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRideState,
                    request_deserializer=ridegrid__pb2.GetRideRequest.FromString,
                    response_serializer=ridegrid__pb2.Ride.SerializeToString,
            ),
            'GetRiderState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRiderState,
                    request_deserializer=ridegrid__pb2.GetRiderRequest.FromString,
                    response_serializer=ridegrid__pb2.GetRiderStateResponse.SerializeToString,
            ),
            'GetDriverState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDriverState,
                    request_deserializer=ridegrid__pb2.GetDriverRequest.FromString,
                    response_serializer=ridegrid__pb2.GetDriverStateResponse.SerializeToString,
            ),
            'StreamRideUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamRideUpdates,
                    request_deserializer=ridegrid__pb2.StreamRideUpdatesRequest.FromString,
                    response_serializer=ridegrid__pb2.RideEvent.SerializeToString,
            ),
            'StreamDriverUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamDriverUpdates,
                    request_deserializer=ridegrid__pb2.StreamDriverUpdatesRequest.FromString,
                    response_serializer=ridegrid__pb2.DriverTelemetry.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ridegrid.StateQuery', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ridegrid.StateQuery', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StateQuery(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRideState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.StateQuery/GetRideState',
            ridegrid__pb2.GetRideRequest.SerializeToString,
            ridegrid__pb2.Ride.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRiderState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.StateQuery/GetRiderState',
            ridegrid__pb2.GetRiderRequest.SerializeToString,
            ridegrid__pb2.GetRiderStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDriverState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ridegrid.StateQuery/GetDriverState',
            ridegrid__pb2.GetDriverRequest.SerializeToString,
            ridegrid__pb2.GetDriverStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamRideUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ridegrid.StateQuery/StreamRideUpdates',
            ridegrid__pb2.StreamRideUpdatesRequest.SerializeToString,
            ridegrid__pb2.RideEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamDriverUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ridegrid.StateQuery/StreamDriverUpdates',
            ridegrid__pb2.StreamDriverUpdatesRequest.SerializeToString,
            ridegrid__pb2.DriverTelemetry.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
