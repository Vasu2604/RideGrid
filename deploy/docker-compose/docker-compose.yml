version: '3.8'

services:
  # =============================================================================
  # Infrastructure Services
  # =============================================================================
  
  postgres:
    image: postgis/postgis:15-3.3
    container_name: ridegrid-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ridegrid}
      POSTGRES_USER: ${POSTGRES_USER:-ridegrid}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ridegrid_dev}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-trust}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ridegrid -d ridegrid"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ridegrid-net

  redis:
    image: redis:7-alpine
    container_name: ridegrid-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ridegrid-net

  # Redpanda (Kafka-compatible)
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.3
    container_name: ridegrid-redpanda
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --smp 1
      - --memory 1G
      - --mode dev-container
      - --default-log-level=info
    ports:
      - "18081:18081" # Schema Registry
      - "18082:18082" # Pandaproxy
      - "19092:19092" # Kafka
      - "19644:9644"   # Admin API
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -q 'Healthy:.*true'"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ridegrid-net

  # Kafka Topics Initialization
  kafka-init:
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.3
    container_name: ridegrid-kafka-init
    depends_on:
      redpanda:
        condition: service_healthy
    entrypoint: >
      bash -c '
        echo "Creating Kafka topics..."
        rpk topic create ride_requests_v1 --brokers redpanda:9092 --partitions 48 --replicas 1
        rpk topic create driver_telemetry_v1 --brokers redpanda:9092 --partitions 96 --replicas 1
        rpk topic create candidate_matches_v1 --brokers redpanda:9092 --partitions 48 --replicas 1
        rpk topic create assignments_v1 --brokers redpanda:9092 --partitions 48 --replicas 1
        rpk topic create ride_events_v1 --brokers redpanda:9092 --partitions 24 --replicas 1
        rpk topic create dlq_events --brokers redpanda:9092 --partitions 12 --replicas 1
        echo "Topics created successfully"
        rpk topic list --brokers redpanda:9092
      '
    networks:
      - ridegrid-net

  # =============================================================================
  # Observability Stack
  # =============================================================================
  
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ridegrid-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - ridegrid-net

  grafana:
    image: grafana/grafana:10.1.1
    container_name: ridegrid-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - ridegrid-net

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.85.0
    container_name: ridegrid-otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter
    depends_on:
      - prometheus
    networks:
      - ridegrid-net

  # =============================================================================
  # RideGrid Services
  # =============================================================================
  
  gateway:
    image: ridegrid/gateway:latest
    build:
      context: ../../
      dockerfile: services/gateway/Dockerfile
    container_name: ridegrid-gateway
    ports:
      - "8001:8000"
    environment:
      - SERVICE_NAME=ridegrid-gateway
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ridegrid}:${POSTGRES_PASSWORD:-ridegrid_dev}@postgres:5432/${POSTGRES_DB:-ridegrid}
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - LOG_LEVEL=INFO
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key-change-in-production}
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    networks:
      - ridegrid-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  telemetry-ingest:
    image: ridegrid/telemetry-ingest:latest
    build:
      context: ../../
      dockerfile: services/telemetry-ingest/Dockerfile
    container_name: ridegrid-telemetry-ingest
    ports:
      - "8002:8000"
    environment:
      - SERVICE_NAME=ridegrid-telemetry-ingest
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    networks:
      - ridegrid-net

  matching-engine:
    image: ridegrid/matching-engine:latest
    build:
      context: ../../
      dockerfile: services/matching-engine/Dockerfile
    container_name: ridegrid-matching-engine
    environment:
      - SERVICE_NAME=ridegrid-matching-engine
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ridegrid}:${POSTGRES_PASSWORD:-ridegrid_dev}@postgres:5432/${POSTGRES_DB:-ridegrid}
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    networks:
      - ridegrid-net

  assignment-orchestrator:
    image: ridegrid/assignment-orchestrator:latest
    build:
      context: ../../
      dockerfile: services/assignment-orchestrator/Dockerfile
    container_name: ridegrid-assignment-orchestrator
    environment:
      - SERVICE_NAME=ridegrid-assignment-orchestrator
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ridegrid}:${POSTGRES_PASSWORD:-ridegrid_dev}@postgres:5432/${POSTGRES_DB:-ridegrid}
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    networks:
      - ridegrid-net

  state-query:
    image: ridegrid/state-query:latest
    build:
      context: ../../
      dockerfile: services/state-query/Dockerfile
    container_name: ridegrid-state-query
    ports:
      - "8003:8000"
    environment:
      - SERVICE_NAME=ridegrid-state-query
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ridegrid}:${POSTGRES_PASSWORD:-ridegrid_dev}@postgres:5432/${POSTGRES_DB:-ridegrid}
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    networks:
      - ridegrid-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # Frontend
  # =============================================================================
  
  ops-console:
    image: ridegrid/ops-console:latest
    build:
      context: ../../web/ops-console
      dockerfile: Dockerfile
    container_name: ridegrid-ops-console
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - NEXT_PUBLIC_WS_URL=ws://localhost:8003
    depends_on:
      gateway:
        condition: service_healthy
      state-query:
        condition: service_healthy
    networks:
      - ridegrid-net

  # =============================================================================
  # Development Tools
  # =============================================================================
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ridegrid-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ridegrid-redpanda
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: redpanda:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://redpanda:8081
    depends_on:
      - redpanda
    networks:
      - ridegrid-net

  adminer:
    image: adminer:4.8.1
    container_name: ridegrid-adminer
    ports:
      - "8082:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - ridegrid-net

volumes:
  postgres_data:
  redis_data:
  redpanda_data:
  prometheus_data:
  grafana_data:

networks:
  ridegrid-net:
    driver: bridge
